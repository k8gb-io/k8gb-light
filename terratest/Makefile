# Copyright 2022 The k8gb Contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
TERRATEST_DIR ?=$(CURDIR)
MAKEAWAY ?=make -C ../.
MAKEIN ?=make -C .

SHELL := bash
ifndef NO_COLOR
YELLOW=\033[0;33m
CYAN=\033[1;36m
# no color
NC=\033[0m
endif

NGINX_INGRESS_VALUES_PATH ?= $(TERRATEST_DIR)/deploy/ingress/nginx-ingress-values.yaml
CLUSTER_GSLB_NETWORK = k3d-action-bridge-network
CLUSTER_GSLB_GATEWAY = docker network inspect $(CLUSTER_GSLB_NETWORK) -f '{{ (index .IPAM.Config 0).Gateway }}'


create-clusters:
	$(MAKEIN) prepare-cluster-edge-dns
	$(MAKEIN) prepare-cluster-k8gb-test-eu
	$(MAKEIN) prepare-cluster-k8gb-test-us
	$(MAKEIN) prepare-cluster-k8gb-test-za

deploy-full-terratest-setup:
	$(MAKEIN) pull-images
	$(MAKEIN) rebuild-k8gb-image
	$(MAKEIN) deploy-cluster-k8gb-edge-dns
	$(MAKEIN) deploy-cluster-k8gb-test-eu CLUSTER_GEOTAG=eu EXT_CLUSTER_GEOTAGS=us\\,za
	$(MAKEIN) deploy-cluster-k8gb-test-us CLUSTER_GEOTAG=us EXT_CLUSTER_GEOTAGS=eu\\,za
	$(MAKEIN) deploy-cluster-k8gb-test-za CLUSTER_GEOTAG=za EXT_CLUSTER_GEOTAGS=eu\\,us

deploy-full-local-setup:
	$(MAKEIN) create-clusters
	$(MAKEIN) deploy-full-terratest-setup
	$(MAKEIN) deploy-demo

deploy-clusters:
	kubectl -n k8gb patch deployment k8gb -p '{"spec": {"template":{"spec":{"containers":[{"name":"k8gb","image":"$(IMG):$(TAG)"}]}}}}'

pull-images:
	@echo -e "\n$(YELLOW)Pulling Images to be imported into clusters$(NC)"
	docker pull k8s.gcr.io/ingress-nginx/controller:v1.1.1
	docker pull ghcr.io/stefanprodan/podinfo:5.2.0
	docker pull absaoss/k8s_crd:v0.0.8
	docker pull absaoss/external-dns:rfc-ns1
	docker pull k8s.gcr.io/ingress-nginx/controller:v1.1.1
	docker pull docker.io/kuritka/k8s_crd:latest-alpha14

prepare-cluster-%:
	@echo -e "\n$(YELLOW)Prepare cluster $(CYAN)$(*)$(NC)"
	k3d cluster delete $(*)
	k3d cluster create -c $(TERRATEST_DIR)/deploy/k3d/$(*).yaml $(*)

deploy-cluster-k8gb-edge-dns:
	@echo -e "\n$(YELLOW)Deploying EdgeDNS $(NC)"
	kubectl --context k3d-edge-dns apply -f $(TERRATEST_DIR)/deploy/edge/

deploy-cluster-%:
	@echo -e "\n$(YELLOW)Deploy k8gb on cluster $(CYAN)$(*)$(NC)"

	@echo -e "\n$(YELLOW)Create namespace $(NC)"
	kubectl apply -f $(TERRATEST_DIR)/deploy/namespace.yaml --context=k3d-$(*)

	@echo -e "\n$(YELLOW)Import Images $(CYAN)$(*)$(NC)"
	k3d image import ghcr.io/stefanprodan/podinfo:5.2.0 -c $(*)
	k3d image import k8s.gcr.io/ingress-nginx/controller:v1.1.1 -c $(*)
	k3d image import absaoss/k8s_crd:v0.0.8 -c $(*)
	k3d image import absaoss/external-dns:rfc-ns1 -c $(*)
	k3d image import k8s.gcr.io/ingress-nginx/controller:v1.1.1 -c $(*)
	k3d image import kuritka/k8s_crd:latest-alpha14 -c $(*)
	k3d image import ${REPOSITORY}/${BIN}:${TAG} -c $(*)

	@echo -e "\n$(YELLOW)Deploy Ingress $(NC)"
	helm repo add --force-update nginx-stable https://kubernetes.github.io/ingress-nginx
	helm repo add --force-update k8gb https://www.k8gb.io
	helm repo update
	helm -n k8gb upgrade -i nginx-ingress nginx-stable/ingress-nginx \
		--version 4.0.15 -f $(NGINX_INGRESS_VALUES_PATH) --kube-context=k3d-$(*)

	@echo -e "\n$(YELLOW)Deploy K8GB $(NC)"
	kubectl -n k8gb --context=k3d-$(*) create secret generic rfc2136 --from-literal=secret=96Ah/a2g0/nLeFGK+d/0tzQcccf9hCEIy34PoXX2Qg8= || true
	cd $(TERRATEST_DIR)/deploy/chart/k8gb && helm dependency update
	helm -n k8gb upgrade -i k8gb k8gb/k8gb \
		--set k8gb.clusterGeoTag='$(CLUSTER_GEOTAG)' \
		--set k8gb.extGslbClustersGeoTags='$(EXT_CLUSTER_GEOTAGS)' \
		--set k8gb.reconcileRequeueSeconds=10 \
		--set k8gb.dnsZoneNegTTL=10 \
		--set k8gb.imageTag=${VERSION:"stable"=""} \
		--set k8gb.log.format=simple \
		--set k8gb.log.level=debug \
		--set rfc2136.enabled=true \
		--set k8gb.edgeDNSServers[0]=$(shell $(CLUSTER_GSLB_GATEWAY)):1053 \
		--set externaldns.image=absaoss/external-dns:rfc-ns1 \
		--wait --timeout=2m0s --kube-context=k3d-$(*)

	@echo -e "\n$(YELLOW)Deploy CoreDNS $(NC)"
	kubectl apply -f $(TERRATEST_DIR)/deploy/coredns --context=k3d-$(*)

	@echo -e "\n$(YELLOW)Patch K8GB to local version $(NC)"
	kubectl -n k8gb patch deployment k8gb -p '{"spec": {"template":{"spec":{"containers":[{"name":"k8gb","image":"$(IMG):$(TAG)"}]}}}}' --context=k3d-$(*)

rebuild-k8gb-image:
	@echo -e "\n$(YELLOW)Rebuild Image $(CYAN)$(REPOSITORY)/$(BIN):$(TAG) $(NC)"
	$(MAKEAWAY) build
	$(MAKEAWAY) image

clean-namespaces:
	kubectl get namespace --no-headers=true -o custom-columns=NAME:metadata.name --context=k3d-k8gb-test-eu  | grep k8gb-test | xargs kubectl delete ns --context=k3d-k8gb-test-eu
	kubectl get namespace --no-headers=true -o custom-columns=NAME:metadata.name --context=k3d-k8gb-test-us  | grep k8gb-test | xargs kubectl delete ns --context=k3d-k8gb-test-us
	kubectl get namespace --no-headers=true -o custom-columns=NAME:metadata.name --context=k3d-k8gb-test-za  | grep k8gb-test | xargs kubectl delete ns --context=k3d-k8gb-test-za

terratest-1:
	cd $(TERRATEST_DIR) && go mod tidy && go test $(TERRATEST_DIR)/1_cluster/ -v -timeout 40m

terratest-3:
	cd $(TERRATEST_DIR) && go mod tidy && go test $(TERRATEST_DIR)/3_cluster/ -v -timeout 40m

include $(TERRATEST_DIR)/demo.mk
# include $(TERRATEST_DIR)/colima.mk