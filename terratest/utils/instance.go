package utils

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"strings"
	"time"

	"github.com/gruntwork-io/terratest/modules/k8s"
	"github.com/stretchr/testify/require"
	v1 "k8s.io/api/core/v1"
)

func (i *Instance) Kill() {
	if i.w.isRunning {
		i.w.t.Logf("killing %s", i.w.namespace)
		i.w.isRunning = false
		k8s.DeleteNamespace(i.w.t, i.w.k8sOptions, i.w.namespace)
		return
	}
	i.w.t.Logf("%s is already killed", i.w.namespace)
}

func (i *Instance) ReapplyIngress(path string) {
	i.w.WithIngress(path)
	i.w.t.Logf("Applying ingress from %s", i.w.ingress.path)
	k8s.KubectlApply(i.w.t, i.w.k8sOptions, i.w.ingress.path)
	k8s.WaitUntilIngressAvailable(i.w.t, i.w.k8sOptions, i.w.ingress.name, defaultRetries, defaultSeconds*time.Second)
	i.w.ingress.instance = k8s.GetIngress(i.w.t, i.w.k8sOptions, i.w.ingress.name)
}

func (i *Instance) Resources() (o *Resources) {
	return &Resources{
		i,
	}
}

func (i *Instance) Tools() (o *Tools) {
	return &Tools{
		i,
	}
}

func (i *Instance) App() *App {
	return &App{
		i: i,
	}
}

func (i *Instance) GetInfo() Info {
	var host string
	if len(i.Resources().Ingress().Spec.Rules) > 0 {
		host = i.Resources().Ingress().Spec.Rules[0].Host
	}
	return Info{
		NodeIPs:       i.getNodesIPs(),
		Host:          host,
		K8gbCoreDNSIP: i.w.k8gbCoreDNSIP,
		AppStatus:     i.getAppStatus(),
	}
}

type Info struct {
	// Cluster available IP's.
	NodeIPs []string
	// Ingress Host, the same host and localtargets-host is expected in the localDNSEndpoint.
	// If ingress has multiple hosts, localDNSEndpoints has multiple hosts and localtargets
	Host string
	// CoreDNS IP
	K8gbCoreDNSIP string
	// App Status
	AppStatus string
}

func (i *Instance) continueIfK8sResourceNotFound(err error) {
	if err != nil && strings.HasSuffix(err.Error(), "not found") {
		return
	}
	require.NoError(i.w.t, err)
}

func (i *Instance) getNodesIPs() (addresses []string) {
	nodes := k8s.GetNodes(i.w.t, i.w.k8sOptions)
	for _, n := range nodes {
		for _, a := range n.Status.Addresses {
			if a.Type == v1.NodeInternalIP {
				addresses = append(addresses, a.Address)
				break
			}
		}
	}
	return addresses
}
