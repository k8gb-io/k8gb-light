package terratest

import (
	"testing"

	"github.com/kuritka/annotation-operator/terratest"
	"github.com/kuritka/annotation-operator/terratest/utils"
	"github.com/stretchr/testify/require"
)

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

func TestFailoverLifecycleOnThreeClusters(t *testing.T) {
	const ingressPath = "./resources/ingress_fo3.yaml"
	const digHits = 10
	const wgetHits = 8
	instanceEU, err := utils.NewWorkflow(t, terratest.Environment.EUCluster, terratest.Environment.EUClusterPort).
		WithIngress(ingressPath).
		WithTestApp(terratest.Environment.EUCluster).
		WithBusybox().
		Start()
	require.NoError(t, err)
	defer instanceEU.Kill()

	instanceUS, err := utils.NewWorkflow(t, terratest.Environment.USCluster, terratest.Environment.USClusterPort).
		WithIngress(ingressPath).
		WithTestApp(terratest.Environment.USCluster).
		WithBusybox().
		Start()
	require.NoError(t, err)
	defer instanceUS.Kill()

	instanceZA, err := utils.NewWorkflow(t, terratest.Environment.ZACluster, terratest.Environment.ZAClusterPort).
		WithIngress(ingressPath).
		WithTestApp(terratest.Environment.ZACluster).
		WithBusybox().
		Start()
	require.NoError(t, err)
	defer instanceZA.Kill()

	t.Run("ðŸ‡ºðŸ‡¸ðŸ‡ªðŸ‡ºðŸ‡¿ðŸ‡¦ Wait until EU, US, ZA clusters are ready, all targets are US", func(t *testing.T) {
		usClusterIPs := instanceUS.GetInfo().NodeIPs
		err = instanceEU.Resources().WaitUntilDNSEndpointContainsTargets(instanceEU.GetInfo().Host, usClusterIPs)
		require.NoError(t, err)
		err = instanceUS.Resources().WaitUntilDNSEndpointContainsTargets(instanceUS.GetInfo().Host, usClusterIPs)
		require.NoError(t, err)
		err = instanceZA.Resources().WaitUntilDNSEndpointContainsTargets(instanceZA.GetInfo().Host, usClusterIPs)
		require.NoError(t, err)
	})

	t.Logf("All clusters are running ðŸšœðŸ’¨! ðŸ‡ªðŸ‡º %s;ðŸ‡ºðŸ‡² %s; ðŸ‡¿ðŸ‡¦ %s;",
		terratest.Environment.EUCluster,
		terratest.Environment.USCluster,
		terratest.Environment.ZACluster)

	t.Run("ðŸ‡ºðŸ‡¸ Digging US,EU,ZA cluster, IPs of US are returned", func(t *testing.T) {
		usClusterIPs := instanceUS.GetInfo().NodeIPs
		ips := instanceEU.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips, usClusterIPs...))
		ips = instanceUS.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips, usClusterIPs...))
		ips = instanceZA.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips, usClusterIPs...))
	})

	t.Run("ðŸ‡ºðŸ‡¸ Wget application, EU,US, ZA clusters, returns only US app", func(t *testing.T) {
		instanceHit := instanceEU.Tools().WgetNTestApp(wgetHits)
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.USCluster))
		instanceHit = instanceUS.Tools().WgetNTestApp(wgetHits)
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.USCluster))
		instanceHit = instanceZA.Tools().WgetNTestApp(wgetHits)
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.USCluster))
	})

	t.Run("ðŸ’€ðŸ‡ºðŸ‡¸ Killing namespace on Primary US cluster", func(t *testing.T) {
		euClusterIPs := instanceEU.GetInfo().NodeIPs
		instanceUS.Kill()
		err = instanceEU.Resources().WaitUntilDNSEndpointContainsTargets(instanceEU.GetInfo().Host, euClusterIPs)
		require.NoError(t, err, "WARNING: If you running test locally, ensure the App with same host IS NOT running in forgotten namespaces")
		err = instanceZA.Resources().WaitUntilDNSEndpointContainsTargets(instanceZA.GetInfo().Host, euClusterIPs)
		require.NoError(t, err, "WARNING: If you running test locally, ensure the App with same host IS NOT running in forgotten namespaces")
	})

	t.Run("ðŸ‡ªðŸ‡º Digging EU,ZA cluster, IPs of EU are returned", func(t *testing.T) {
		euClusterIPs := instanceEU.GetInfo().NodeIPs
		host := instanceEU.GetInfo().Host
		ips := instanceEU.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips, euClusterIPs...))
		ips = instanceZA.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips, euClusterIPs...))
		// US namespace doesn't exists, no Ingress, no DNS record
		r := instanceUS.Tools().DigCoreDNSHost(host)
		require.True(t, utils.EqualItems([]string{}, r))
	})

	t.Run("ðŸ‡ªðŸ‡º Wget application EU,ZA clusters, returns only EU app", func(t *testing.T) {
		instanceHit := instanceEU.Tools().WgetNTestApp(wgetHits)
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.EUCluster))

		instanceHit = instanceZA.Tools().WgetNTestApp(wgetHits)
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.EUCluster))

		// us namespace doesn't exists, no busybox installed
	})

	t.Run("ðŸ’€ðŸ‡ªðŸ‡º Killing app on Secondary EU cluster", func(t *testing.T) {
		instanceEU.App().StopTestApp()
		zaClusterIPs := instanceZA.GetInfo().NodeIPs
		err = instanceEU.Resources().WaitUntilDNSEndpointContainsTargets(instanceZA.GetInfo().Host, zaClusterIPs)
		require.NoError(t, err, "WARNING: If you running test locally, ensure the App with same host IS NOT running in forgotten namespaces")
		err = instanceZA.Resources().WaitUntilDNSEndpointContainsTargets(instanceZA.GetInfo().Host, zaClusterIPs)
		require.NoError(t, err, "WARNING: If you running test locally, ensure the App with same host IS NOT running in forgotten namespaces")
	})

	t.Run("ðŸ‡¿ðŸ‡¦ Digging EU,ZA cluster, IPs of EU are returned", func(t *testing.T) {
		zaClusterIPs := instanceZA.GetInfo().NodeIPs
		ips := instanceEU.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips, zaClusterIPs...))
		ips = instanceZA.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips, zaClusterIPs...))
		r := instanceUS.Tools().DigCoreDNSHost(instanceZA.GetInfo().Host)
		require.True(t, utils.EqualItems(r, []string{}))
	})

	t.Run("ðŸ‡¿ðŸ‡¦ Wget application EU,ZA clusters, returns only ZA app", func(t *testing.T) {
		instanceHit := instanceEU.Tools().WgetNTestApp(wgetHits)
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.ZACluster))
		instanceHit = instanceZA.Tools().WgetNTestApp(wgetHits)
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.ZACluster))
	})

	t.Run("ðŸ’€ðŸ‡¿ðŸ‡¦ Killing app on Secondary ZA cluster", func(t *testing.T) {
		instanceZA.App().StopTestApp()
		err = instanceEU.Resources().WaitUntilDNSEndpointContainsTargets(instanceZA.GetInfo().Host, []string{})
		require.NoError(t, err, "WARNING: If you running test locally, ensure the App with same host IS NOT running in forgotten namespaces")
		err = instanceZA.Resources().WaitUntilDNSEndpointContainsTargets(instanceZA.GetInfo().Host, []string{})
		require.NoError(t, err, "WARNING: If you running test locally, ensure the App with same host IS NOT running in forgotten namespaces")
	})

	t.Run("ðŸ’€ðŸ’€ Digging US,EU,ZA cluster, empty IPs are returned", func(t *testing.T) {
		ips := instanceEU.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips))
		ips = instanceZA.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips))
		r := instanceUS.Tools().DigCoreDNSHost(instanceZA.GetInfo().Host)
		require.True(t, utils.EqualItems(r, []string{}))
	})

	t.Run("âš¡ðŸ‡ºðŸ‡¸ Spin up Primary cluster - US", func(t *testing.T) {
		instanceUS, err = utils.NewWorkflow(t, terratest.Environment.USCluster, terratest.Environment.USClusterPort).
			WithIngress(ingressPath).
			WithTestApp(terratest.Environment.USCluster).
			WithBusybox().
			Start()
		require.NoError(t, err)
		usClusterIPs := instanceUS.GetInfo().NodeIPs
		err = instanceUS.Resources().WaitUntilDNSEndpointContainsTargets(instanceUS.GetInfo().Host, usClusterIPs)
		require.NoError(t, err, "WARNING: If you running test locally, ensure the App with same host IS NOT running in forgotten namespaces")
		err = instanceEU.Resources().WaitUntilDNSEndpointContainsTargets(instanceEU.GetInfo().Host, usClusterIPs)
		require.NoError(t, err, "WARNING: If you running test locally, ensure the App with same host IS NOT running in forgotten namespaces")
		err = instanceZA.Resources().WaitUntilDNSEndpointContainsTargets(instanceZA.GetInfo().Host, usClusterIPs)
		require.NoError(t, err, "WARNING: If you running test locally, ensure the App with same host IS NOT running in forgotten namespaces")
	})

	t.Run("ðŸ‡ºðŸ‡¸ Digging US,EU,ZA cluster, IPs of US are returned", func(t *testing.T) {
		usClusterIPs := instanceUS.GetInfo().NodeIPs
		ips := instanceEU.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips, usClusterIPs...))
		ips = instanceUS.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips, usClusterIPs...))
		ips = instanceZA.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips, usClusterIPs...))
	})

	t.Run("ðŸ‡ºðŸ‡¸ Wget application US,EU,ZA clusters, returns only EU app", func(t *testing.T) {
		instanceHit := instanceEU.Tools().WgetNTestApp(wgetHits)
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.USCluster))
		instanceHit = instanceUS.Tools().WgetNTestApp(wgetHits)
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.USCluster))
		instanceHit = instanceZA.Tools().WgetNTestApp(wgetHits)
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.USCluster))
	})

	t.Run("âš¡ðŸ‡ªðŸ‡ºðŸ‡¿ðŸ‡¦ Spin up Apps on Secondary clusters- EU,ZA", func(t *testing.T) {
		instanceUS.App().StartTestApp()
		usIPs := instanceUS.GetInfo().NodeIPs

		err = instanceUS.Resources().WaitUntilDNSEndpointContainsTargets(instanceUS.GetInfo().Host, usIPs)
		require.NoError(t, err, "WARNING: If you running test locally, ensure the App with same host IS NOT running in forgotten namespaces")
		err = instanceEU.Resources().WaitUntilDNSEndpointContainsTargets(instanceEU.GetInfo().Host, usIPs)
		require.NoError(t, err, "WARNING: If you running test locally, ensure the App with same host IS NOT running in forgotten namespaces")
		err = instanceZA.Resources().WaitUntilDNSEndpointContainsTargets(instanceZA.GetInfo().Host, usIPs)
		require.NoError(t, err, "WARNING: If you running test locally, ensure the App with same host IS NOT running in forgotten namespaces")
	})

	t.Run("ðŸ‡ºðŸ‡¸ Digging US,EU,ZA cluster, IPs of US are returned", func(t *testing.T) {
		usClusterIPs := instanceUS.GetInfo().NodeIPs
		ips := instanceEU.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips, usClusterIPs...))
		ips = instanceUS.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips, usClusterIPs...))
		ips = instanceZA.Tools().DigNCoreDNS(digHits)
		require.True(t, utils.MapHasOnlyKeys(ips, usClusterIPs...))
	})

	t.Run("ðŸ‡ºðŸ‡¸ Wget application, EU,US, ZA clusters, returns only US app", func(t *testing.T) {
		instanceHit := instanceEU.Tools().WgetNTestApp(wgetHits)
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.USCluster))
		instanceHit = instanceUS.Tools().WgetNTestApp(wgetHits)
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.USCluster))
		instanceHit = instanceZA.Tools().WgetNTestApp(wgetHits)
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.USCluster))
	})
}
