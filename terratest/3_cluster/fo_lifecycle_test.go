package terratest

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/kuritka/annotation-operator/terratest"
	"github.com/kuritka/annotation-operator/terratest/utils"
	"github.com/stretchr/testify/assert"
)

func TestRoundRobinLifecycleOnThreeClusters(t *testing.T) {
	const ingressPath = "./resources/ingress_rr.yaml"
	const digHits = 300
	const wgetHits = 150
	instanceEU, err := utils.NewWorkflow(t, terratest.Environment.EUCluster, terratest.Environment.EUClusterPort).
		WithIngress(ingressPath).
		WithTestApp(terratest.Environment.EUCluster).
		WithBusybox().
		Start()
	assert.NoError(t, err)
	defer instanceEU.Kill()

	instanceUS, err := utils.NewWorkflow(t, terratest.Environment.USCluster, terratest.Environment.USClusterPort).
		WithIngress(ingressPath).
		WithTestApp(terratest.Environment.USCluster).
		WithBusybox().
		Start()
	assert.NoError(t, err)
	defer instanceUS.Kill()

	instanceZA, err := utils.NewWorkflow(t, terratest.Environment.ZACluster, terratest.Environment.ZAClusterPort).
		WithIngress(ingressPath).
		WithTestApp(terratest.Environment.ZACluster).
		WithBusybox().
		Start()
	assert.NoError(t, err)
	defer instanceZA.Kill()

	allClusterIPs := utils.Merge(instanceEU.GetInfo().IPs, instanceUS.GetInfo().IPs, instanceZA.GetInfo().IPs)

	t.Run("Wait until EU, US, ZA clusters are ready", func(t *testing.T) {
		// waiting untill all localDNSEndpoints has all addresses
		err = instanceEU.Resources().WaitUntilDNSEndpointContainsTargets(instanceEU.GetInfo().Host, allClusterIPs)
		assert.NoError(t, err)
		err = instanceUS.Resources().WaitUntilDNSEndpointContainsTargets(instanceUS.GetInfo().Host, allClusterIPs)
		assert.NoError(t, err)
		err = instanceZA.Resources().WaitUntilDNSEndpointContainsTargets(instanceZA.GetInfo().Host, allClusterIPs)
		assert.NoError(t, err)
	})

	t.Run("Wget application, returned clusters have similar probability", func(t *testing.T) {
		instanceHit := instanceEU.Tools().WgetNTestApp(wgetHits)
		p := instanceHit.HasSimilarProbabilityOnPrecision(25)
		require.True(t, p, "Instance Hit must return clusters with similar probability")
		require.True(t, utils.MapHasOnlyKeys(instanceHit, terratest.Environment.EUCluster, terratest.Environment.EUCluster,
			terratest.Environment.ZACluster))
	})

	t.Run("Digging one cluster, returned addresses have the same probability", func(t *testing.T) {
		ips := instanceEU.Tools().DigNCoreDNS(digHits)
		p := ips.HasSimilarProbabilityOnPrecision(8)
		assert.True(t, p, "Dig must return IPs with equal probability")
		require.True(t, utils.MapHasOnlyKeys(ips, allClusterIPs...))
	})

	// killing ZA cluster
	// waiting
	// digging
	// curling
	// killing US cluster
	// waiting
	// digging
	// curling
}
