package mapper

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"k8s.io/apimachinery/pkg/types"
	"reflect"
	"testing"

	"github.com/stretchr/testify/assert"
	netv1 "k8s.io/api/networking/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"cloud.example.com/annotation-operator/controllers/depresolver"

	"github.com/golang/mock/gomock"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

func TestGetIngress(t *testing.T) {
	const (
		ns   = "test-namespace"
		name = "test-name"
	)
	var tests = []struct {
		name           string
		nn             types.NamespacedName
		object         *netv1.Ingress
		expectedResult Result
		err            error
		strategy       string
	}{
		/*
			TODO: some nil stuffs, not existing objects etc...
		*/
		{name: "Ingress Without Annotation", nn: types.NamespacedName{Name: name, Namespace: ns},
			object: &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{
				Name: name}}, expectedResult: ResultExistsButNotAnnotationFound, err: nil},
		{name: "Ingress With Unrelated Annotation", nn: types.NamespacedName{Name: name, Namespace: ns},
			object: &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Annotations: map[string]string{"x.y.com": "10"},
				Name: name}}, expectedResult: ResultExistsButNotAnnotationFound, err: nil},
		{name: "Ingress With RR Annotation", nn: types.NamespacedName{Name: name, Namespace: ns},
			object: &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Annotations: map[string]string{AnnotationStrategy: depresolver.RoundRobinStrategy},
				Name: name}}, expectedResult: ResultExists, err: nil},
		{name: "Ingress With invalid FO Annotation", nn: types.NamespacedName{Name: name, Namespace: ns},
			object: &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Annotations: map[string]string{AnnotationStrategy: depresolver.FailoverStrategy},
				Name: name}}, expectedResult: ResultError, err: nil},
		{name: "Ingress With valid FO Annotation", nn: types.NamespacedName{Name: name, Namespace: ns},
			object: &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Annotations: map[string]string{AnnotationStrategy: depresolver.FailoverStrategy},
				Name: name}}, expectedResult: ResultError, err: nil},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			m := Client(t)
			m.Client.(*MockClient).EXPECT().Get(gomock.Any(), gomock.Any(), gomock.Any()).DoAndReturn(
				func(arg0, arg1 interface{}, ing *netv1.Ingress, args ...interface{}) error {
					ing.ObjectMeta = test.object.ObjectMeta
					return test.err
				})
			rs, result, err := NewCommonProvider(m.Client, &depresolver.Config{}).Get(test.nn)
			assert.Equal(t, test.expectedResult, result)
			assert.True(t, reflect.DeepEqual(test.object.ObjectMeta, rs.Ingress.ObjectMeta))
			assert.Equal(t, result == ResultError, err != nil)
		})
	}
}

func Client(t *testing.T) struct{ Client client.Client } {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()
	return struct {
		Client client.Client
	}{
		NewMockClient(ctrl),
	}
}
