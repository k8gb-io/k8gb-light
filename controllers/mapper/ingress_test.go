package mapper

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"fmt"
	"reflect"
	"testing"

	"cloud.example.com/annotation-operator/controllers/providers/metrics"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime/schema"
	externaldns "sigs.k8s.io/external-dns/endpoint"

	"cloud.example.com/annotation-operator/controllers/depresolver"
	"cloud.example.com/annotation-operator/controllers/utils"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
	netv1 "k8s.io/api/networking/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func TestIngressMapperRemovingFinalizer(t *testing.T) {
	var serr = fmt.Errorf("update error")
	var tx = metav1.Now()
	var tests = []struct {
		name                    string
		expectedResult          Result
		expectedErr             error
		expectedFinalizers      []string
		finalizationLogicCalled bool
		finalizationLogicError  error
		updateError             error
		ingress                 *netv1.Ingress
	}{
		{
			name: "No Finalizers", expectedResult: ResultContinue, expectedErr: nil, expectedFinalizers: nil,
			finalizationLogicCalled: false, updateError: nil, finalizationLogicError: nil,
			ingress: &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Finalizers: nil}},
		},
		{
			name: "No K8gb Finalizer", expectedResult: ResultContinue, expectedErr: nil, expectedFinalizers: []string{"random.finalizer"},
			finalizationLogicCalled: false, updateError: nil, finalizationLogicError: nil,
			ingress: &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Finalizers: []string{"random.finalizer"}, DeletionTimestamp: &tx}},
		},
		{
			name: "Remove K8gb Finalizer", expectedResult: ResultFinalizerRemoved, expectedErr: nil, expectedFinalizers: []string{},
			finalizationLogicCalled: true, updateError: nil, finalizationLogicError: nil,
			ingress: &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Finalizers: []string{Finalizer}, DeletionTimestamp: &tx}},
		},
		{
			name: "Remove K8gb Finalizer With Other Finalizers", expectedResult: ResultFinalizerRemoved, expectedErr: nil,
			expectedFinalizers: []string{"test"}, finalizationLogicCalled: true, updateError: nil, finalizationLogicError: nil,
			ingress: &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Finalizers: []string{Finalizer, "test"}, DeletionTimestamp: &tx}},
		},
		{
			name: "K8gb Finalizer Removed Without DeletationTimestamp", expectedResult: ResultContinue, expectedErr: nil,
			expectedFinalizers: []string{Finalizer}, finalizationLogicCalled: false, updateError: nil, finalizationLogicError: nil,
			ingress: &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Finalizers: []string{Finalizer}}},
		},
		{
			name: "Update Error", expectedResult: ResultError, expectedErr: serr, expectedFinalizers: []string{},
			finalizationLogicCalled: true, updateError: serr, finalizationLogicError: nil,
			ingress: &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Finalizers: []string{Finalizer}, DeletionTimestamp: &tx}},
		},
		{
			name: "Finalize Call Error", expectedResult: ResultError, expectedErr: serr, expectedFinalizers: []string{Finalizer},
			finalizationLogicCalled: true, updateError: serr, finalizationLogicError: serr,
			ingress: &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Finalizers: []string{Finalizer}, DeletionTimestamp: &tx}},
		},
		{
			name: "Nil Ingress", expectedResult: ResultError, expectedErr: serr, expectedFinalizers: nil,
			finalizationLogicCalled: false, updateError: nil, finalizationLogicError: serr,
			ingress: nil,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			// arrange
			fainalzationLogicCalled := false
			m := M(t)
			m.Client.(*MockClient).EXPECT().Update(gomock.Any(), gomock.Any()).Return(test.updateError).Times(1)
			// act
			rs, _ := fromIngress(test.ingress, NewIngressMapper(m.Client, &depresolver.Config{}, utils.NewUDPDig()))
			result, err := rs.TryRemoveFinalizer(func(state *LoopState) error {
				fainalzationLogicCalled = true
				return test.finalizationLogicError
			})
			// assert
			assert.Equal(t, test.expectedResult, result)
			assert.Equal(t, test.expectedErr != nil, err != nil)
			assert.Equal(t, test.finalizationLogicCalled, fainalzationLogicCalled)
			if rs.Ingress != nil {
				assert.True(t, utils.EqualItems(rs.Ingress.Finalizers, test.expectedFinalizers))
			}
		})
	}
}

func TestIngressMapperInjectingFinalizer(t *testing.T) {
	var serr = fmt.Errorf("update error")
	var tests = []struct {
		name               string
		expectedResult     Result
		expectedErr        error
		expectedFinalizers []string
		ingress            *netv1.Ingress
		updateError        error
	}{
		{name: "Inject Finalizer", expectedResult: ResultFinalizerInstalled, expectedErr: nil, ingress: &netv1.Ingress{},
			updateError: nil, expectedFinalizers: []string{Finalizer}},
		{name: "Inject Finalizer Between Others", expectedResult: ResultFinalizerInstalled, expectedErr: nil, updateError: nil,
			ingress:            &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Finalizers: []string{"existing", "blah"}}},
			expectedFinalizers: []string{"existing", "blah", Finalizer}},
		{name: "Finalizer Already Exists", expectedResult: ResultContinue, expectedErr: nil, updateError: nil,
			ingress:            &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Finalizers: []string{Finalizer}}},
			expectedFinalizers: []string{Finalizer}},
		{name: "Finalizer Update Error But Already Installed", expectedResult: ResultContinue, expectedErr: nil,
			ingress:            &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Finalizers: []string{Finalizer}}},
			expectedFinalizers: []string{Finalizer}, updateError: serr},
		{name: "Finalizer Update Error And Not Installed", expectedResult: ResultError, expectedErr: serr,
			ingress:            &netv1.Ingress{ObjectMeta: metav1.ObjectMeta{Finalizers: []string{}}},
			expectedFinalizers: []string{Finalizer}, updateError: serr},
		{name: "Ingress Nil", expectedResult: ResultError, expectedErr: serr, ingress: nil,
			updateError: nil, expectedFinalizers: nil},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			// arrange
			m := M(t)
			m.Client.(*MockClient).EXPECT().Update(gomock.Any(), gomock.Any()).Return(test.updateError).Times(1)
			// act
			rs, _ := fromIngress(test.ingress, NewIngressMapper(m.Client, &depresolver.Config{}, utils.NewUDPDig()))
			result, err := rs.TryInjectFinalizer()
			// assert
			assert.Equal(t, test.expectedResult, result)
			assert.Equal(t, test.expectedErr != nil, err != nil)
			if rs.Ingress != nil {
				assert.True(t, utils.EqualItems(rs.Ingress.Finalizers, test.expectedFinalizers))
			}
		})
	}
}

func TestIngressGetStatus(t *testing.T) {
	var serr = fmt.Errorf("error")
	ingressNoBackend := RRon2().Ingress.DeepCopy()
	ingressNoBackend.Spec.Rules[0].IngressRuleValue.HTTP.Paths[0].Backend.Service.Name = ""
	ingressNoRules := RRon2().Ingress.DeepCopy()
	ingressNoRules.Spec.Rules = []netv1.IngressRule{}
	var tests = []struct {
		name             string
		ingress          *netv1.Ingress
		dnsEndpoint      *externaldns.DNSEndpoint
		service          *corev1.Service
		endpoint         *corev1.Endpoints
		config           *depresolver.Config
		serviceErr       error
		endpointError    error
		dnsEndpointError error
		expectedStatus   Status
	}{
		{name: "RR on TwoClusters", ingress: RRon2().Ingress, config: &depresolver.Config{ClusterGeoTag: "us"}, endpointError: nil,
			dnsEndpoint: RRon2().LocalTargetsDNSEndpoint, endpoint: RRon2().Endpoint, service: RRon2().Service, serviceErr: nil,
			expectedStatus: Status{ServiceHealth: map[string]metrics.HealthStatus{"demo.cloud.example.com": metrics.Healthy},
				HealthyRecords: map[string][]string{"demo.cloud.example.com": {"172.18.0.5", "172.18.0.6", "172.18.0.3", "172.18.0.4"}},
				GeoTag:         "us", Hosts: "demo.cloud.example.com",
			}},

		{name: "RR on TwoClusters Service Error", ingress: RRon2().Ingress, config: &depresolver.Config{ClusterGeoTag: "us"},
			dnsEndpoint: RRon2().LocalTargetsDNSEndpoint, endpoint: RRon2().Endpoint, service: RRon2().Service, serviceErr: serr,
			expectedStatus: Status{ServiceHealth: map[string]metrics.HealthStatus{"demo.cloud.example.com": metrics.Unhealthy},
				HealthyRecords: map[string][]string{"demo.cloud.example.com": {"172.18.0.5", "172.18.0.6", "172.18.0.3", "172.18.0.4"}},
				GeoTag:         "us", Hosts: "demo.cloud.example.com",
			}, endpointError: nil},

		{name: "RR on TwoClusters Service NotFound", ingress: RRon2().Ingress, config: &depresolver.Config{ClusterGeoTag: "us"},
			dnsEndpoint: RRon2().LocalTargetsDNSEndpoint, endpoint: RRon2().Endpoint, service: RRon2().Service,
			serviceErr: errors.NewNotFound(schema.GroupResource{}, RRon2().Service.Name), endpointError: nil,
			expectedStatus: Status{ServiceHealth: map[string]metrics.HealthStatus{"demo.cloud.example.com": metrics.NotFound},
				HealthyRecords: map[string][]string{"demo.cloud.example.com": {"172.18.0.5", "172.18.0.6", "172.18.0.3", "172.18.0.4"}},
				GeoTag:         "us", Hosts: "demo.cloud.example.com",
			}},

		{name: "RR on TwoClusters Missing Rules", ingress: ingressNoRules, config: &depresolver.Config{ClusterGeoTag: "us"},
			dnsEndpoint: RRon2().LocalTargetsDNSEndpoint, endpoint: nil, service: nil,
			serviceErr: nil, endpointError: nil,
			expectedStatus: Status{ServiceHealth: map[string]metrics.HealthStatus{},
				HealthyRecords: map[string][]string{"demo.cloud.example.com": {"172.18.0.5", "172.18.0.6", "172.18.0.3", "172.18.0.4"}},
				GeoTag:         "us", Hosts: "",
			}},

		{name: "RR on TwoClusters Ingress Backend Not Specified", ingress: ingressNoBackend, config: &depresolver.Config{ClusterGeoTag: "us"},
			dnsEndpoint: RRon2().LocalTargetsDNSEndpoint, endpoint: RRon2().Endpoint, service: RRon2().Service,
			serviceErr: errors.NewNotFound(schema.GroupResource{}, RRon2().Service.Name), endpointError: nil,
			expectedStatus: Status{ServiceHealth: map[string]metrics.HealthStatus{"demo.cloud.example.com": metrics.NotFound},
				HealthyRecords: map[string][]string{"demo.cloud.example.com": {"172.18.0.5", "172.18.0.6", "172.18.0.3", "172.18.0.4"}},
				GeoTag:         "us", Hosts: "demo.cloud.example.com",
			}},

		{name: "RR on TwoClusters Endpoint Error", ingress: RRon2().Ingress, config: &depresolver.Config{ClusterGeoTag: "us"},
			dnsEndpoint: RRon2().LocalTargetsDNSEndpoint, endpoint: RRon2().Endpoint, service: RRon2().Service,
			serviceErr: nil, endpointError: serr,
			expectedStatus: Status{ServiceHealth: map[string]metrics.HealthStatus{"demo.cloud.example.com": metrics.Unhealthy},
				HealthyRecords: map[string][]string{"demo.cloud.example.com": {"172.18.0.5", "172.18.0.6", "172.18.0.3", "172.18.0.4"}},
				GeoTag:         "us", Hosts: "demo.cloud.example.com",
			}},

		{name: "RR on TwoClusters DNSEndpoint Error", ingress: RRon2().Ingress, config: &depresolver.Config{ClusterGeoTag: "us"},
			dnsEndpoint: RRon2().LocalTargetsDNSEndpoint, endpoint: RRon2().Endpoint, service: RRon2().Service,
			serviceErr: nil, endpointError: nil, dnsEndpointError: serr,
			expectedStatus: Status{ServiceHealth: map[string]metrics.HealthStatus{"demo.cloud.example.com": metrics.Healthy},
				HealthyRecords: map[string][]string{},
				GeoTag:         "us", Hosts: "demo.cloud.example.com",
			}},

		{name: "FO on TwoClusters US", ingress: FOon2c2().Ingress, config: &depresolver.Config{ClusterGeoTag: "us"}, endpointError: nil,
			dnsEndpoint: FOon2c2().LocalTargetsDNSEndpoint, endpoint: FOon2c2().Endpoint, service: FOon2c2().Service, serviceErr: nil,
			expectedStatus: Status{ServiceHealth: map[string]metrics.HealthStatus{"demo.cloud.example.com": metrics.Healthy},
				HealthyRecords: map[string][]string{"demo.cloud.example.com": {"172.18.0.3", "172.18.0.4"}},
				GeoTag:         "us", Hosts: "demo.cloud.example.com",
			}},

		{name: "FO on TwoClusters EU", ingress: FOon2c1().Ingress, config: &depresolver.Config{ClusterGeoTag: "eu"}, endpointError: nil,
			dnsEndpoint: FOon2c2().LocalTargetsDNSEndpoint, endpoint: FOon2c1().Endpoint, service: FOon2c1().Service, serviceErr: nil,
			expectedStatus: Status{ServiceHealth: map[string]metrics.HealthStatus{"demo.cloud.example.com": metrics.Healthy},
				HealthyRecords: map[string][]string{"demo.cloud.example.com": {"172.18.0.3", "172.18.0.4"}},
				GeoTag:         "eu", Hosts: "demo.cloud.example.com",
			}},

		// {name: "RR on TwoClusters With Two Hosts Pointing To Same Service", ingress: RRon2().AddHost("rodeo.cloud.example.com").Ingress,
		//	config: &depresolver.Config{ClusterGeoTag: "us"}, endpointError: nil,
		//	dnsEndpoint: RRon2().LocalTargetsDNSEndpoint, endpoint: RRon2().Endpoint, service: RRon2().Service, serviceErr: nil,
		//	expectedStatus: Status{ServiceHealth: map[string]metrics.HealthStatus{
		//		"demo.cloud.example.com": metrics.Healthy, "rodeo.cloud.example.com": metrics.Healthy},
		//		HealthyRecords: map[string][]string{
		//			"demo.cloud.example.com":  {"172.18.0.5", "172.18.0.6", "172.18.0.3", "172.18.0.4"},
		//			"rodeo.cloud.example.com": {"172.18.0.5", "172.18.0.6", "172.18.0.3", "172.18.0.4"}},
		//		GeoTag: "us", Hosts: "demo.cloud.example.com, rodeo.cloud.example.com",
		//	}},

		// TODO: healthy records jsou ty co nejsou localtargets! , no A records; zadne targety, vice rules v ingressu;  WRR, FO;
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {

			// arrange
			m := M(t)
			m.Client.(*MockClient).EXPECT().Get(gomock.Any(), gomock.Any(), gomock.AssignableToTypeOf(&corev1.Service{})).DoAndReturn(
				func(arg0, arg1 interface{}, svc *corev1.Service, args ...interface{}) error {
					svc.Spec = test.service.Spec
					return test.serviceErr
				}).Times(len(test.ingress.Spec.Rules))

			m.Client.(*MockClient).EXPECT().Get(gomock.Any(), gomock.Any(), gomock.AssignableToTypeOf(&corev1.Endpoints{})).DoAndReturn(
				func(arg0, arg1 interface{}, ep *corev1.Endpoints, args ...interface{}) error {
					ep.Subsets = test.endpoint.Subsets
					return test.endpointError
				}).Times(len(test.ingress.Spec.Rules))

			m.Client.(*MockClient).EXPECT().Get(gomock.Any(), gomock.Any(), gomock.AssignableToTypeOf(&externaldns.DNSEndpoint{})).DoAndReturn(
				func(arg0, arg1 interface{}, ep *externaldns.DNSEndpoint, args ...interface{}) error {
					ep.Spec = test.dnsEndpoint.Spec
					return test.dnsEndpointError
				})

			// act
			rs, _ := fromIngress(test.ingress, NewIngressMapper(m.Client, test.config, utils.NewUDPDig()))
			status := rs.GetStatus()

			// assert
			assert.True(t, reflect.DeepEqual(test.expectedStatus, status))
		})
	}
}

func TestIngressGetExposedIPs(t *testing.T) {
	const (
		demo  = "demo.cloud.example.com"
		rodeo = "rodeo.cloud.example.com"
		zulu  = "zulu.cloud.example.com"
	)
	serr := fmt.Errorf("some error")
	var tests = []struct {
		name                 string
		fqdn                 string
		ingressStatusRecords []corev1.LoadBalancerIngress
		expectedErr          error
		expectedIPs          []string
	}{
		{name: "Ingress Status IPs", ingressStatusRecords: []corev1.LoadBalancerIngress{{IP: "172.18.0.5"}, {IP: "172.18.0.6"}},
			expectedErr: nil, expectedIPs: []string{"172.18.0.5", "172.18.0.6"}},
		{name: "Ingress Status Hosts", ingressStatusRecords: []corev1.LoadBalancerIngress{{Hostname: demo}, {Hostname: rodeo}},
			expectedErr: nil, expectedIPs: []string{"172.18.0.5", "172.18.0.6", "172.18.0.7"}},
		{name: "Dig produces error", ingressStatusRecords: []corev1.LoadBalancerIngress{{Hostname: zulu}},
			expectedErr: serr, expectedIPs: []string(nil)},
		{name: "No records", ingressStatusRecords: []corev1.LoadBalancerIngress{},
			expectedErr: nil, expectedIPs: []string(nil)},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			// arrange
			m := M(t)
			m.Dig.(*MockDigger).EXPECT().DigA(demo).Times(1).Return([]string{"172.18.0.5", "172.18.0.6"}, nil)
			m.Dig.(*MockDigger).EXPECT().DigA(rodeo).Times(1).Return([]string{"172.18.0.7"}, nil)
			m.Dig.(*MockDigger).EXPECT().DigA(zulu).Times(1).Return(nil, serr)
			ingress := RRon2().Ingress.DeepCopy()
			ingress.Status.LoadBalancer.Ingress = test.ingressStatusRecords

			// act
			rs, _ := fromIngress(ingress, NewIngressMapper(m.Client, &depresolver.Config{}, m.Dig))
			ips, err := rs.GetExposedIPs()

			// assert
			assert.Equal(t, test.expectedIPs, ips)
			assert.Equal(t, test.expectedErr != nil, err != nil)
		})
	}
}
