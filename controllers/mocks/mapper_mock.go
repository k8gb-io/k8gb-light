// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/reconciliation/mapper.go

// Package mocks is a generated GoMock package.
package mocks

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	reflect "reflect"

	reconciliation "cloud.example.com/annotation-operator/controllers/reconciliation"
	gomock "github.com/golang/mock/gomock"
	types "k8s.io/apimachinery/pkg/types"
)

// MockMapper is a mock of Mapper interface.
type MockMapper struct {
	ctrl     *gomock.Controller
	recorder *MockMapperMockRecorder
}

// MockMapperMockRecorder is the mock recorder for MockMapper.
type MockMapperMockRecorder struct {
	mock *MockMapper
}

// NewMockMapper creates a new mock instance.
func NewMockMapper(ctrl *gomock.Controller) *MockMapper {
	mock := &MockMapper{ctrl: ctrl}
	mock.recorder = &MockMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapper) EXPECT() *MockMapperMockRecorder {
	return m.recorder
}

// Equal mocks base method.
func (m *MockMapper) Equal(arg0, arg1 *reconciliation.LoopState) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal.
func (mr *MockMapperMockRecorder) Equal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockMapper)(nil).Equal), arg0, arg1)
}

// Get mocks base method.
func (m *MockMapper) Get(arg0 types.NamespacedName) (*reconciliation.LoopState, reconciliation.MapperResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*reconciliation.LoopState)
	ret1, _ := ret[1].(reconciliation.MapperResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockMapperMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMapper)(nil).Get), arg0)
}

// TryInjectFinalizer mocks base method.
func (m *MockMapper) TryInjectFinalizer(arg0 *reconciliation.LoopState) (reconciliation.MapperResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryInjectFinalizer", arg0)
	ret0, _ := ret[0].(reconciliation.MapperResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryInjectFinalizer indicates an expected call of TryInjectFinalizer.
func (mr *MockMapperMockRecorder) TryInjectFinalizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryInjectFinalizer", reflect.TypeOf((*MockMapper)(nil).TryInjectFinalizer), arg0)
}

// TryRemoveFinalizer mocks base method.
func (m *MockMapper) TryRemoveFinalizer(arg0 *reconciliation.LoopState, arg1 func(*reconciliation.LoopState) error) (reconciliation.MapperResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryRemoveFinalizer", arg0, arg1)
	ret0, _ := ret[0].(reconciliation.MapperResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryRemoveFinalizer indicates an expected call of TryRemoveFinalizer.
func (mr *MockMapperMockRecorder) TryRemoveFinalizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryRemoveFinalizer", reflect.TypeOf((*MockMapper)(nil).TryRemoveFinalizer), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockMapper) UpdateStatus(arg0 *reconciliation.LoopState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockMapperMockRecorder) UpdateStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMapper)(nil).UpdateStatus), arg0)
}
