// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/providers/metrics/provider.go

// Package mocks is a generated GoMock package.
package mocks

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	metrics "github.com/k8gb-io/k8gb-light/controllers/providers/metrics"
	types "k8s.io/apimachinery/pkg/types"
	endpoint "sigs.k8s.io/external-dns/endpoint"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMetrics) Get(name string) *metrics.MetricResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*metrics.MetricResult)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockMetricsMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetrics)(nil).Get), name)
}

// IncrementError mocks base method.
func (m *MockMetrics) IncrementError(n types.NamespacedName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementError", n)
}

// IncrementError indicates an expected call of IncrementError.
func (mr *MockMetricsMockRecorder) IncrementError(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementError", reflect.TypeOf((*MockMetrics)(nil).IncrementError), n)
}

// IncrementReconciliation mocks base method.
func (m *MockMetrics) IncrementReconciliation(n types.NamespacedName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementReconciliation", n)
}

// IncrementReconciliation indicates an expected call of IncrementReconciliation.
func (mr *MockMetricsMockRecorder) IncrementReconciliation(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementReconciliation", reflect.TypeOf((*MockMetrics)(nil).IncrementReconciliation), n)
}

// InfobloxIncrementHeartbeat mocks base method.
func (m *MockMetrics) InfobloxIncrementHeartbeat(n types.NamespacedName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InfobloxIncrementHeartbeat", n)
}

// InfobloxIncrementHeartbeat indicates an expected call of InfobloxIncrementHeartbeat.
func (mr *MockMetricsMockRecorder) InfobloxIncrementHeartbeat(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfobloxIncrementHeartbeat", reflect.TypeOf((*MockMetrics)(nil).InfobloxIncrementHeartbeat), n)
}

// InfobloxIncrementHeartbeatError mocks base method.
func (m *MockMetrics) InfobloxIncrementHeartbeatError(n types.NamespacedName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InfobloxIncrementHeartbeatError", n)
}

// InfobloxIncrementHeartbeatError indicates an expected call of InfobloxIncrementHeartbeatError.
func (mr *MockMetricsMockRecorder) InfobloxIncrementHeartbeatError(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfobloxIncrementHeartbeatError", reflect.TypeOf((*MockMetrics)(nil).InfobloxIncrementHeartbeatError), n)
}

// InfobloxIncrementZoneUpdate mocks base method.
func (m *MockMetrics) InfobloxIncrementZoneUpdate(n types.NamespacedName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InfobloxIncrementZoneUpdate", n)
}

// InfobloxIncrementZoneUpdate indicates an expected call of InfobloxIncrementZoneUpdate.
func (mr *MockMetricsMockRecorder) InfobloxIncrementZoneUpdate(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfobloxIncrementZoneUpdate", reflect.TypeOf((*MockMetrics)(nil).InfobloxIncrementZoneUpdate), n)
}

// InfobloxIncrementZoneUpdateError mocks base method.
func (m *MockMetrics) InfobloxIncrementZoneUpdateError(n types.NamespacedName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InfobloxIncrementZoneUpdateError", n)
}

// InfobloxIncrementZoneUpdateError indicates an expected call of InfobloxIncrementZoneUpdateError.
func (mr *MockMetricsMockRecorder) InfobloxIncrementZoneUpdateError(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfobloxIncrementZoneUpdateError", reflect.TypeOf((*MockMetrics)(nil).InfobloxIncrementZoneUpdateError), n)
}

// InfobloxObserveRequestDuration mocks base method.
func (m *MockMetrics) InfobloxObserveRequestDuration(start time.Time, request metrics.DNSProviderRequest, success bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InfobloxObserveRequestDuration", start, request, success)
}

// InfobloxObserveRequestDuration indicates an expected call of InfobloxObserveRequestDuration.
func (mr *MockMetricsMockRecorder) InfobloxObserveRequestDuration(start, request, success interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfobloxObserveRequestDuration", reflect.TypeOf((*MockMetrics)(nil).InfobloxObserveRequestDuration), start, request, success)
}

// Register mocks base method.
func (m *MockMetrics) Register() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockMetricsMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockMetrics)(nil).Register))
}

// SetRuntimeInfo mocks base method.
func (m *MockMetrics) SetRuntimeInfo(version, commit string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRuntimeInfo", version, commit)
}

// SetRuntimeInfo indicates an expected call of SetRuntimeInfo.
func (mr *MockMetricsMockRecorder) SetRuntimeInfo(version, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRuntimeInfo", reflect.TypeOf((*MockMetrics)(nil).SetRuntimeInfo), version, commit)
}

// Unregister mocks base method.
func (m *MockMetrics) Unregister() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister")
}

// Unregister indicates an expected call of Unregister.
func (mr *MockMetricsMockRecorder) Unregister() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockMetrics)(nil).Unregister))
}

// UpdateEndpointStatus mocks base method.
func (m *MockMetrics) UpdateEndpointStatus(ep *endpoint.DNSEndpoint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateEndpointStatus", ep)
}

// UpdateEndpointStatus indicates an expected call of UpdateEndpointStatus.
func (mr *MockMetricsMockRecorder) UpdateEndpointStatus(ep interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpointStatus", reflect.TypeOf((*MockMetrics)(nil).UpdateEndpointStatus), ep)
}

// UpdateFailoverStatus mocks base method.
func (m *MockMetrics) UpdateFailoverStatus(n types.NamespacedName, isPrimary bool, healthy metrics.HealthStatus, targets []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateFailoverStatus", n, isPrimary, healthy, targets)
}

// UpdateFailoverStatus indicates an expected call of UpdateFailoverStatus.
func (mr *MockMetricsMockRecorder) UpdateFailoverStatus(n, isPrimary, healthy, targets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFailoverStatus", reflect.TypeOf((*MockMetrics)(nil).UpdateFailoverStatus), n, isPrimary, healthy, targets)
}

// UpdateGeoIPStatus mocks base method.
func (m *MockMetrics) UpdateGeoIPStatus(n types.NamespacedName, healthy metrics.HealthStatus, targets []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateGeoIPStatus", n, healthy, targets)
}

// UpdateGeoIPStatus indicates an expected call of UpdateGeoIPStatus.
func (mr *MockMetricsMockRecorder) UpdateGeoIPStatus(n, healthy, targets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeoIPStatus", reflect.TypeOf((*MockMetrics)(nil).UpdateGeoIPStatus), n, healthy, targets)
}

// UpdateHealthyRecordsMetric mocks base method.
func (m *MockMetrics) UpdateHealthyRecordsMetric(n types.NamespacedName, healthyRecords map[string][]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateHealthyRecordsMetric", n, healthyRecords)
}

// UpdateHealthyRecordsMetric indicates an expected call of UpdateHealthyRecordsMetric.
func (mr *MockMetricsMockRecorder) UpdateHealthyRecordsMetric(n, healthyRecords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHealthyRecordsMetric", reflect.TypeOf((*MockMetrics)(nil).UpdateHealthyRecordsMetric), n, healthyRecords)
}

// UpdateIngressHostsPerStatusMetric mocks base method.
func (m *MockMetrics) UpdateIngressHostsPerStatusMetric(n types.NamespacedName, serviceHealth map[string]metrics.HealthStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateIngressHostsPerStatusMetric", n, serviceHealth)
}

// UpdateIngressHostsPerStatusMetric indicates an expected call of UpdateIngressHostsPerStatusMetric.
func (mr *MockMetricsMockRecorder) UpdateIngressHostsPerStatusMetric(n, serviceHealth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngressHostsPerStatusMetric", reflect.TypeOf((*MockMetrics)(nil).UpdateIngressHostsPerStatusMetric), n, serviceHealth)
}

// UpdateRoundrobinStatus mocks base method.
func (m *MockMetrics) UpdateRoundrobinStatus(n types.NamespacedName, healthy metrics.HealthStatus, targets []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateRoundrobinStatus", n, healthy, targets)
}

// UpdateRoundrobinStatus indicates an expected call of UpdateRoundrobinStatus.
func (mr *MockMetricsMockRecorder) UpdateRoundrobinStatus(n, healthy, targets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoundrobinStatus", reflect.TypeOf((*MockMetrics)(nil).UpdateRoundrobinStatus), n, healthy, targets)
}
