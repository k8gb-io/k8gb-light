package utils

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"fmt"
	"github.com/miekg/dns"
	"sort"
)

type UDPDig struct {
	edgeDNSServers []DNSServer
}

func NewUDPDig(edgeDNSServers []DNSServer) *UDPDig {
	return &UDPDig{edgeDNSServers: edgeDNSServers}
}

func (u *UDPDig) DigA(fqdn string) (ips []string, err error) {
	if len(fqdn) == 0 {
		return
	}
	dns.Fqdn(fqdn)
	msg := new(dns.Msg)
	msg.SetQuestion(fqdn, dns.TypeA)
	ack, err := u.exchange(msg)
	if err != nil {
		return nil, fmt.Errorf("dig error: %s", err)
	}
	for _, a := range ack.Answer {
		ips = append(ips, a.(*dns.A).A.String())
	}
	sort.Strings(ips)
	return
}

func (u *UDPDig) exchange(m *dns.Msg) (msg *dns.Msg, err error) {
	for _, ns := range u.edgeDNSServers {
		if ns.Host == "" {
			return nil, fmt.Errorf("empty edgeDNSServer.Host in the list")
		}
		msg, err = dns.Exchange(m, ns.String())
		if err != nil {
			continue
		}
		return
	}
	return nil, fmt.Errorf("exchange error: all dns servers: '%v' were tried and none of them were able to resolve, err: %s", u.edgeDNSServers, err)
}
