# Copyright 2022 The k8gb Contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
BIN := k8gb
REGISTRY = docker.io
REPOSITORY = kuritka
TAG = 932-fix-3
IMG = $(REGISTRY)/$(REPOSITORY)/$(BIN)
KEY?=ing
NS?=demo



GOLIC_VERSION  ?= v0.7.2
GOKART_VERSION ?= v0.5.1
GOLANGCI_VERSION ?= v1.50.1
MOCKGEN_VERSION ?= v1.6.0

MAKEIN =make -C .
SHELL := bash

ifndef NO_COLOR
YELLOW=\033[0;33m
CYAN=\033[1;36m
RED=\033[31m
# no color
NC=\033[0m
endif

# create GOBIN if not specified
ifndef GOBIN
GOBIN=$(shell go env GOPATH)/bin
endif

# check integrity
.PHONY: check
check: license lint gokart build test ## Check project integrity

# updates source code with license headers
.PHONY: license
license:
	@echo -e "\n$(YELLOW)Injecting the license$(NC)"
	@go install github.com/AbsaOSS/golic@$(GOLIC_VERSION)
	$(GOBIN)/golic inject -t apache2


# runs golangci-lint aggregated linter; see .golangci.yaml for linter list
.PHONY: lint
lint:
	@echo -e "\n$(YELLOW)Running the linters$(NC)"
	goimports -w ./
	@go install github.com/golangci/golangci-lint/cmd/golangci-lint@$(GOLANGCI_VERSION)
	$(GOBIN)/golangci-lint run


.PHONY: build
build:
	@echo -e "\n$(YELLOW)Building binary$(NC)"
	CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ./k8gb main.go

# run tests
.PHONY: test
test:
	@echo -e "\n$(YELLOW)Running the unit tests$(NC)"
	go test $$(go list ./... | grep -Ev '/mocks|/terratest|/logging|/tracing') --cover

# GoKart - Go Security Static Analysis
# see: https://github.com/praetorian-inc/gokart
.PHONY: gokart
gokart:
	@go install github.com/praetorian-inc/gokart@$(GOKART_VERSION)
	$(GOBIN)/gokart scan --globalsTainted --verbose


.PHONY: mocks
mocks:
	go install github.com/golang/mock/mockgen@$(MOCKGEN_VERSION)
	mockgen -package=mocks -destination=controllers/mocks/assistant_mock.go -source=controllers/providers/assistant/assistant.go Assistant
	mockgen -package=mocks -destination=controllers/mocks/client_mock.go sigs.k8s.io/controller-runtime/pkg/client Client
	mockgen -package=mocks -destination=controllers/mocks/resolver_mock.go -source=controllers/depresolver/resolver.go GslbResolver
	mockgen -package=mocks -destination=controllers/mocks/provider_mock.go -source=controllers/providers/dns/dns.go Provider
	mockgen -package=mocks -destination=controllers/mocks/mapper_mock.go -source=controllers/mapper/mapper.go Mapper
	mockgen -package=mocks -destination=controllers/mocks/manager_mock.go sigs.k8s.io/controller-runtime/pkg/manager Manager
	mockgen -package=mocks -destination=controllers/mocks/infoblox-client_mock.go -source=controllers/providers/dns/infoblox-client.go InfobloxClient
	mockgen -package=mocks -destination=controllers/mocks/infoblox-connection_mock.go github.com/infobloxopen/infoblox-go-client IBConnector
	mockgen -package=mocks -destination=controllers/mocks/tracer_mock.go go.opentelemetry.io/otel/trace Tracer
	mockgen -package=mocks -destination=controllers/mocks/span_mock.go go.opentelemetry.io/otel/trace Span
	#mockgen -package=mocks -destination=controllers/mocks/metrics_mock.go -source=controllers/reconciliation/mapper.go Mapper
	$(MAKEIN) license

watch:
	@watch -n 1 $(MAKEIN) generation

generation:
	@echo "DNSEndpoint generation"  `kubectl get dnsendpoint $(KEY) -ojsonpath={.metadata.generation} -n $(NS)`
	@echo "Ingress generation" `kubectl get ingress $(KEY) -ojsonpath={.metadata.generation} -n $(NS)`
	@echo
	@kubectl get dnsendpoint $(KEY) -oyaml -n $(NS) | grep "  endpoints:" -A 23
	@echo "dig test-gslb2" `dig -p 5054 @localhost demo.cloud.example.com +tcp +nostats +noedns +nocomment;`

ing:
	kubectl -n demo apply -f ing.yaml --context=k3d-test-gslb1
	kubectl -n demo apply -f ing.yaml --context=k3d-test-gslb2

image:
	docker build . -t ${IMG}:${TAG}

redeploy: build image
	k3d image import ${REPOSITORY}/${BIN}:${TAG} -c test-gslb2
	k3d image import ${REPOSITORY}/${BIN}:${TAG} -c test-gslb1
	kubectl -n k8gb patch deployment k8gb -p '{"spec": {"template":{"spec":{"containers":[{"name":"k8gb","image":"$(IMG):$(TAG)"}]}}}}'


